Duration_And_Beat_Position_Critic ran out of memory.  How to be more efficient??
	- Only load the meter that's needed.  Leave the other ones on disk.
	- Look into lossiness, compression, many-to-one transforms. e.g., only store
		whether notes were short, medium, or long, rather than remembering the whole
		duration.  This will help with memory issues AND with generalization.
		- This may call for some framework other than object and symbol 

Let users of Fake Sensor control how many of the training vectors it uses

Training now takes forever.  
    - Save/Load markov chains so we can do training offline
    - Make training multi-threaded (at least 2-threaded) to take advantage of SMP?

Put a 'context' member on each note that points to shared context hash (***)
	- this could be different for different phrases
	- it could contain harmonic info, intended surprise levels, etc.

Refactor beat_position to just point to / contain a meter

Need to figure out a better place to invoke the meter detection.  A bulk critic? (***)

New Critic: meter

New Critic: phrase length
New Critic: tempo

New Critic: chord/scale (w/ underlying chord generation too)
New Critic: key sig (look at prevalence of all notes so far. match to existing schemes)
New Critic: overall shape of line

Some sort of ending prediction
	- factor oracle
	- markov chain based on [cur note; # notes left] to predict [next note]

Change to planning based on time, vs. # notes
